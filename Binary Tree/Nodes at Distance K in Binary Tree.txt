#include<iostream>

using namespace std;

struct node{
	int data;
	node* right;
	node* left;
	node(int val){
		data=val;
		right=NULL;
		left=NULL;
	}
};

void printSubtreeNodes(node* root, int k){
	if(root==NULL || k<0){
		return;
	}

	if(k==0){
		cout<<root->data<<" ";
		return;
	}

	printSubtreeNodes(root->left, k-1);
	printSubtreeNodes(root->right, k-1);
}

int printNodesAtK(node* root, node* target, int k){
	if(root==NULL){
		return -1;
	}

	if(root==target){
		printSubtreeNodes(root, k);
		return 0;
	}

	int dl= printNodesAtK(root->left, target, k);
	if(dl!=-1){
		if(dl+1==k){
			cout<<root->data<<" ";
		}
		else{
			printSubtreeNodes(root->right, k-dl-2);
		}
		return 1+dl;
	}

	int dr= printNodesAtK(root->right, target, k);
	if(dr!=-1){
		if(dr+1==k){
			cout<<root->data<<" ";
		}
		else{
			printSubtreeNodes(root->left, k-dr-2);
		}
		return 1+dr;
	}

	return -1;
}

int main(){

	/* 
	       1
	      / \
	     2   3
	    /
	   4
	  /
	 5

	 */

	
	struct node* root= new node(1);
	root->left=new node(2);
	root->right=new node(3);
	root->left->left=new node(4);
	root->left->left->left=new node(5);

	int k=2;

	cout<<"Nodes at distance "<<k<<" is/are: ";

	printNodesAtK(root, root->left, k);

	return 0;
}