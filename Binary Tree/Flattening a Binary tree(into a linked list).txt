#include<iostream>
using namespace std;

struct node{
	int data;
	node* right;
	node* left;

	node(int val){
		data=val;
		left=NULL;
		right=NULL;
	}

};


void flatten(node* root){
	if(root==NULL || (root->left==NULL && root->right==NULL)){
		return;
	}

	node* temp = root->right;
	
	if(root->left!=NULL){
		flatten(root->left);

		root->right= root->left;
		root->left= NULL;

		node* t=root->right;
		while(t->right!=NULL){
			t=t->right;
		}

		t->right= temp;
	}
	flatten(temp);
}

void printFlatTree(node* root){
	if(root->right==NULL){
		return;
	}

	cout<<root->data<<" ";
	printFlatTree(root->right);
}

int main(){
	struct node* root= new node(1);
	root->left= new node(2);
	root->right=new node(3);
	root->left->left= new node(4);
	root->left->right= new node(5);
	root->right->left= new node(6);
	root->right->right= new node(7);
	root->right->left->left= new node(8);
	root->right->left->right= new node(9);
	
	flatten(root);
	printFlatTree(root);

	return 0;
}