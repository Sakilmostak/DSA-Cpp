#include<iostream>
#include<queue>
using namespace std;

struct node{
	int data;
	node* right;
	node* left;

	node(int val){
		data=val;
		left=NULL;
		right=NULL;
	}

};

int height(node* root){
	if(root==NULL){
		return 0;
	}

	int lh=height(root->left);
	int rh=height(root->right);

	return max(lh,rh)+1;
}

bool isBalance(node* root){             //Time complexity is of O(n*n)
	if(root==NULL){
		return true;
	}

	if(isBalance(root->left)== false){
		return false;
	}

	if(isBalance(root->right)== false){
		return false;
	}

	int lh= height(root->left);
	int rh= height(root->right);

	if(abs(lh-rh) <=1){                  //abs() is a predifined function which gives the mod of given value
		return true;
	}
	else{
		return false;
	}
}

bool isBalanceshort(node* root, int* height){          //Time complexity O(n)
	if(root==NULL){
		return true;
	}

	int lh=0,rh=0;

	if(isBalanceshort(root->left, &lh)==false){
		return false;
	}
	if(isBalanceshort(root->right, &rh)==false){
		return false;
	}

	*height=max(lh, rh)+1;
	if(abs(lh-rh) <=1){                  //abs() is a predifined function which gives the mod of given value
		return true;
	}
	else{
		return false;
	}
}

int main(){
	struct node* root= new node(1);
	root->left= new node(2);
	root->left->left= new node(4);
	root->left->right= new node(5);
	int h=0;
	
	if(isBalanceshort(root, &h)){
		cout<<"Tree is balanced"<<endl;
	}
	else{
		cout<<"Tree is unbalanced"<<endl;
	}

	return 0;
}