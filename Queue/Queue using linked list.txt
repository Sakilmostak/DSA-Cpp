#include<iostream>

using namespace std;

class node{
public:
	int data;
	node* next;

	node(int val){
		data=val;
		next=NULL;
	}

	~node(){
		cout<<"Node deleted"<<endl;
	}
};

class queue{
public:
	node* front;
	node* back;
	

	queue(){
		front=NULL;
		back=NULL;
	}

	void enqueue(int x){
		node* n=new node(x);

		if(front==NULL){
			back=n;
			front=n;
			return;
		}
		back->next=n;
		back=n;
	}

	void dequeue(){
		if(front==NULL){
			cout<<"Queue underflow"<<endl;
			return;
		}

		node* todelete=front;
		front=front->next;

		delete todelete;
	}

	int peek(){
		if(front==NULL){
			cout<<"No element in queue"<<endl;
			return -1;
		}

		return front->data;
	}

	bool empty(){
		if(front==NULL){
			return true;
		}

		return false;
	}

	void deleteall(){
		while(front!=NULL){

			node* deletion= front;
			front=front->next;
			delete deletion;

		}
	}
};

int main(){
	queue q;
	q.enqueue(1);
	cout<<q.peek()<<endl;
	q.enqueue(2);
	cout<<q.peek()<<endl;
	q.enqueue(3);
	cout<<q.peek()<<endl;
	q.enqueue(4);
	cout<<q.peek()<<endl;
	q.enqueue(5);
	cout<<q.peek()<<endl;

	q.dequeue();
	q.dequeue();
	cout<<q.peek()<<endl;

	q.deleteall();

	return 0;

}