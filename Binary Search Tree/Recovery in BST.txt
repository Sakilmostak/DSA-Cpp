#include<iostream>
#include<climits>
using namespace std;

struct node{
	int data;
	node* right;
	node* left;
	node(int val){
		data=val;
		right=NULL;
		left=NULL;
	}
};

void swap(int *a, int *b){
	int temp= *a;
	*a= *b;
	*b= temp;
}

void calcPointer(node* root, node** first, node** mid, node** last, node** prev){
	if(root==NULL){
		return;
	}

	calcPointer(root->left, first, mid, last, prev);

	if(*prev && root->data< (*prev)->data){
		if(!*first){
			*first= *prev;
			*mid= root;
		}
		else{
			*last= root;
		}
	}
	*prev= root;
	calcPointer(root->right, first, mid, last, prev);
}

void inorderPrint(node* root){
	if(root==NULL){
		return;
	}

	inorderPrint(root->left);
	cout<<root->data<<" ";
	inorderPrint(root->right);
}

void restoreBST(node* root){
	node* first, * mid, * last, * prev;
	first= NULL;
	mid= NULL;
	last= NULL;
	prev= NULL;

	calcPointer(root, &first, &mid, &last, &prev);

	if(first && last){
		swap(&(first->data), &(last->data));
	}
	else if(first && mid){
		swap(&(first->data), &(mid->data));
	}
}

int main(){
	struct node* root= new node(6);
	root->left=new node(9);
	root->right=new node(3);
	root->left->left=new node(1);
	root->left->right= new node(4);
	root->right->right= new node(13);

	inorderPrint(root);
	cout<<endl;

	restoreBST(root);

	inorderPrint(root);
	cout<<endl;

	return 0;
}