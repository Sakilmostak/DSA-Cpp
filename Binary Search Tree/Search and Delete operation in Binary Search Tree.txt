#include<iostream>
#include<limits.h>
using namespace std;

struct node{
	int data;
	node* right;
	node* left;
	node(int val){
		data=val;
		right=NULL;
		left=NULL;
	}
};

node* insertBST(node* root, int val){
	if(root==NULL){
		return new node(val);
	}

	if(val<root->data){
		root->left= insertBST(root->left, val);
	}
	else{
		root->right= insertBST(root->right, val);
	}
	return root;
}

void inorderprint(node* root){
	if(root==NULL){
		return;
	}

	inorderprint(root->left);
	cout<<root->data<<" ";
	inorderprint(root->right);
}

node* searchInBST(node* root, int key){
	if(root==NULL){
		return NULL;
	}

	if(root->data==key){
		return root;
	}

	if(root->data>key){
		return searchInBST(root->left, key);
	}

	return searchInBST(root->right, key);
}

node* inorderSucc(node* root){
	node* curr= root;

	while(curr && curr->right!= NULL){
		curr= curr->right;
	}
	return curr;
}

node* deleteInBST(node* root, int key){

	if(root->data>key){
		root->left= deleteInBST(root->left, key);
	}
	else if(root->data<key){
		root->right= deleteInBST(root->right, key);
	}
	else{
		if(root->left==NULL){
			node* temp= root->right;
			free(root);                    // a predefined function to deallocate memory of a pointer to make it reusable
			return temp;
		}
		else if(root->right==NULL){
			node* temp= root->left;
			free(root);
			return temp;
		}

		node* temp= inorderSucc(root->right);
		root->data= temp->data;
		root->right= deleteInBST(root->right, temp->data);
	}
	return root;
}

int main(){


	struct node* root= NULL;
	root = insertBST(root, 5);
	insertBST(root, 1);
	insertBST(root, 3);
	insertBST(root, 4);
	insertBST(root, 2);
	insertBST(root, 7);

	inorderprint(root);
	cout<<endl;
	deleteInBST(root, 3);
	inorderprint(root);
	
	return 0;
}